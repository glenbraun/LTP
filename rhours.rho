
// A RHours Property is:
// The property is a claim of performing some human activity.
//      Timeframe
//          A general indication of when the activity occurred. 
//      Claims
//          Descriptive claims of human activities. Examples include hours of work,
//          a completed task, anything that accurately describes the human activity.

// A RHours Compensation Agreement is:
// An purchase agreement between an RHours organization and an RHours property holder.
//      Price
//          The agreed purchase price.
//      InterestRate
//          Expressed as annual, compounded continuously rate. 
//      DateOfPurchase
//          When the compensation agreement begins earning interest.
//      MaxAmount
//          Provides an upper bound for compensation.
//      AmountCompensated
//          How much has been received in compensation.
//      IsFullyCompensated
//          Once fully compensated, no more compensation is received.

// A RHours Organization is:
// A collection of RHours compensation agreements.
//      Name
//          A human readable name for the organization.
//      CompensationAgreements
//          Agreements to purchase the properties which form the organization.
//      RevenueProcess
//          Distributes revenue to pay the compensation agreements.
//      Receipts
//          A history of past payments.

new stdout(`rho:io:stdout`) in {

// Structure for holding the properties owned by a person
// Create a name in the registry that the person owns and only they can modify
// Use, insertSigned_ed25519(`rho:registry:insertSigned:ed25519`) for that
// At the name, store the map
// The map looks like this:
// {"Id": "1", Rhours-Property-Map}

// The RHours Property has this structure
// {"StartDate": "2018-10-18", "EndDate": "2018-10-20", "Claims": ["Fixed a bug"]}

// We'll do this with an unforgable name first.
/*
new insertArbitrary(`rho:registry:insertArbitrary`), stdout(`rho:io:stdout`) in {
    new x, return in {
        // Insert the name into the registry
        // TODO: Wrap in bundle+ so only write is possible for those who lookup
        insertArbitrary!(*x, *return) |
 
        // Receive the URI generated by the registry
        for (xUri <- return) {
            // Something like: `rho:id:rtu77e1cj1ky7dpqyoc6o8rcdseseax35qi7w37hbf3astmrcupusi`
            stdout!(*xUri)
        } |
        
        // Initialize the map
        x!({ })
    }
}
*/


// Set the map to a value
/*
new lookup(`rho:registry:lookup`), return in {
    lookup!(`rho:id:6gogydd9ep161ipc7d56ugyj3gzi6qjg473ewrzgk83t6mbwnrsto7`, *return) |
    
    for (person <- return) {
        person!({ })
    }
}
*/

// Now, let's say there is an add of a property
new lookup(`rho:registry:lookup`), return in {
    lookup!(`rho:id:hnb4oa1e6seg1gouxp7ksfykgcum91zcadfxednnqo15qgffchwd3q`, *return) |
    
    for (person <- return) {
        for (data <- person) {
            person!(*data.union({"id1": {"StartDate": "2018-10-18", "EndDate": "2018-10-20", "Claims": ["Fixed a bug"]} }))

            //match *p {
            //    { } => { stdout!("Got empty map and writing back empty") | person!({ }) }
            //    _         => stdout!("Got no match")
            //} 
        } 
    }
}


}